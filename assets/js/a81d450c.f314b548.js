"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,g=m["".concat(s,".").concat(c)]||m[c]||h[c]||i;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},o="Parsing arguments with Bash",l={unversionedId:"bash/argument-parsing",id:"bash/argument-parsing",title:"Parsing arguments with Bash",description:"Using argument variables",source:"@site/docs-howto/bash/argument-parsing.md",sourceDirName:"bash",slug:"/bash/argument-parsing",permalink:"/howto/bash/argument-parsing",draft:!1,editUrl:"https://github.com/bennetrr/wiki/edit/main/docs-howto/bash/argument-parsing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How To's: Overview",permalink:"/howto/overview"},next:{title:"colored-text",permalink:"/howto/bash/colored-text"}},s={},p=[{value:"Using argument variables",id:"using-argument-variables",level:2},{value:"Using the arguments array",id:"using-the-arguments-array",level:2},{value:"Using <code>getopt</code>",id:"using-getopt",level:2},{value:"Sources",id:"sources",level:2}],u={toc:p};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"parsing-arguments-with-bash"},"Parsing arguments with Bash"),(0,r.kt)("h2",{id:"using-argument-variables"},"Using argument variables"),(0,r.kt)("p",null,"The name of the script is stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"$0"),".\nThe arguments passed to the script are stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"$1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$2")," etc."),(0,r.kt)("h2",{id:"using-the-arguments-array"},"Using the arguments array"),(0,r.kt)("p",null,"The arguments of the script are stored in an array called ",(0,r.kt)("inlineCode",{parentName:"p"},"$@"),".\nYou can loop over them to check if the script was called with a certain argument."),(0,r.kt)("h2",{id:"using-getopt"},"Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"getopt")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getopt")," is a command line argument parser that is installed by default on most Linux distributions.\nIt supports both long (",(0,r.kt)("inlineCode",{parentName:"p"},"--arg1")," and also ",(0,r.kt)("inlineCode",{parentName:"p"},"-arg1"),") and short (",(0,r.kt)("inlineCode",{parentName:"p"},"-a"),") arguments, which can also receive values."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getopt")," supports the following arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-a")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"--alternative")," allows long options to start with a single dash (",(0,r.kt)("inlineCode",{parentName:"li"},"-long-option"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-n")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"--name")," sets the name that appears in the message if an argument is invalid."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-o")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"--options")," specifies the short options ",(0,r.kt)("inlineCode",{parentName:"li"},"getopt")," should look for.\nPut one colon behind the option if the option should take a required argument.\nPut two colons behind the option if the option should take an optional argument."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-l")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"--longoptions")," specifies the long options ",(0,r.kt)("inlineCode",{parentName:"li"},"getopt")," should look for.\nPut one colon behind the option if the option should take a required argument.\nPut two colons behind the option if the option should take an optional argument.")),(0,r.kt)("p",null,"Here is a simple example script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Set some default values:\nALPHA=unset\nBETA=unset\nCHARLIE=unset\nDELTA=unset\n\n# Defining an usage function\nusage()\n{\n  echo "Usage: alphabet [ -a | --alpha ] [ -b | --beta ]\n                        [ -c | --charlie CHARLIE ] \n                        [ -d | --delta   DELTA   ] filename(s)"\n  exit 2\n}\n\n# Calling getopt\nPARSED_ARGUMENTS=$(getopt -a -n alphabet -o abc:d: -l alpha,bravo,charlie:,delta: -- "$@")  # -- "$@" gives getopt the arguments of the script\n\n# Testing if any valid arguments are given\nVALID_ARGUMENTS=$?\nif [ "$VALID_ARGUMENTS" != "0" ]; then usage; fi\n\n# Load the parsed arguments in the argument array\neval set -- "$PARSED_ARGUMENTS"\n\n# Looping over the the arguments and removing the current (with shift)\nwhile :\ndo\n  case "$1" in\n    -a | --alpha)   ALPHA=1      ; shift   ;;\n    -b | --beta)    BETA=1       ; shift   ;;\n    -c | --charlie) CHARLIE="$2" ; shift 2 ;;\n    -d | --delta)   DELTA="$2"   ; shift 2 ;;\n    --) shift; break ;;  # After the --, getopt puts the remaining arguments\n    *) echo "Unexpected option: $1 - this should not happen."\n       usage ;;\n  esac\ndone\n\necho "ALPHA   : $ALPHA"\necho "BETA    : $BETA "\necho "CHARLIE : $CHARLIE"\necho "DELTA   : $DELTA"\necho "Parameters remaining are: $@"\n')),(0,r.kt)("h2",{id:"sources"},"Sources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://linuxhint.com/command_line_arguments_bash_script/"},"Bash Command Line Arguments | LinuxHint")),(0,r.kt)("li",{parentName:"ul"},"getopt man page")))}h.isMDXComponent=!0}}]);